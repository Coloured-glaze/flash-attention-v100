# This workflow will upload a Python Package to Release asset
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Manual Build Wheel Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'branch name or version tag or commit hash: main / v0.0.1 / acdefg'
        default: 'main'
        required: true
        type: string
      python_version:
        description: 'python_version: multiple versions separated by ,'
        default: '3.10'
        required: true
        type: string
      torch_version:
        description: 'torch_version: multiple versions separated by ,'
        default: '2.1.2;2.4.0'
        required: true
        type: string
      cuda_version:
        description: 'cuda_version: multiple versions separated by ,'
        default: '11.8.0;12.1.0'
        required: true
        type: string
      os_version:
        description: 'os_version: ubuntu-latest, ubuntu-24.04, ubuntu-20.04'
        default: 'ubuntu-20.04'
        required: true
        type: string

jobs:
  set_ver:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          python <<EOF
          import os, json
          py_version = os.getenv("PYTHON_VERSION").split(";")
          torch_versions = os.getenv("TORCH_VERSION").split(";")
          cuda_versions = os.getenv("CUDA_VERSION").split(";")
          exclude_list = []
          for py_v in py_version:
              for torch_v in torch_versions:
                  for cuda_v in cuda_versions:
                      if (torch_v == "2.4.0" and cuda_v == "11.8.0") or \
                        (torch_v == "2.1.2" and cuda_v == "12.1.0"):
                          exclude_list.append({
                                  "python_ver": py_v,
                                  "torch_ver": torch_v,
                                  "cuda_ver": cuda_v,
                          })
          matrix = {
              "python_ver" : py_version,
              "torch_ver" : torch_versions,
              "cuda_ver" : cuda_versions,
              "include": [],
              "exclude": exclude_list,
          }
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write(f"matrix={json.dumps(matrix)}\n")
          print(matrix)
          EOF
        shell: bash
        env:
          PYTHON_VERSION: ${{ inputs.python_version }}
          TORCH_VERSION: ${{ inputs.torch_version }}  
          CUDA_VERSION: ${{ inputs.cuda_version }}
        
  wheel:
    name: ${{ inputs.os_version }}-py${{ matrix.python_ver }}-th${{ matrix.torch_ver }}-cu${{ matrix.cuda_ver }}
    needs: set_ver
    runs-on: ${{ inputs.os_version }}

    strategy:
      matrix: ${{ fromJSON(needs.set_ver.outputs.matrix) }}
    
    steps:
      - name: Print matrix
        run: |
          echo "Matrix json :${{ needs.set_ver.outputs.matrix }}"
          echo "Matrix to json: ${{ toJson(matrix) }}"
          echo "Matrix:${{ matrix }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_ver }}

      - name: Format CUDA version
        run: |
          cuda_ver=$(echo ${{ matrix.cuda_ver }} | sed 's/\.//g' | sed 's/0//g')
          echo "Format CUDA version is ${cuda_ver}"
          echo "cuda_fmt_ver=${cuda_ver}" >> $GITHUB_ENV

      - name: Install PyTorch ${{ matrix.torch_ver }}+cu${{ env.cuda_fmt_ver }}
        run: |
          pip config set global.index-url https://pypi.org/simple
          pip install setuptools==68.0.0 ninja packaging wheel numpy==1.26.4 
          pip install --no-cache-dir torch==${{ matrix.torch_ver }} --index-url https://download.pytorch.org/whl/cu${{ env.cuda_fmt_ver }}
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__); print('CUDA:', torch.version.cuda); from torch.utils import cpp_extension; print(cpp_extension.CUDA_HOME)"
      
      - name: Install CUDA ${{ matrix.cuda_ver }}
        uses: Coloured-glaze/cuda-toolkit@dev
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_ver }}
          linux-local-args: '["--toolkit"]'
          method: 'network' 
          # "local" or "network" 

      - name: Print CUDA version
        run: |
          echo "Installed cuda version is ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V
          gcc --version

      - name: Build wheel
        run: |
          export FORCE_CUDA="1"
          export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          python setup.py bdist_wheel --dist-dir=dist
          ls -lh dist/*whl 
          wheel_name=$(ls dist/*whl | xargs -n 1 basename ")
          ls dist/*whl | xargs -I {} mv {} ${wheel_name}
          echo "wheel_name=${wheel_name}" >> "$GITHUB_ENV"
          echo "wheel_name ${wheel_name}"
        shell: bash

      - name: Get tag from GITHUB_REF
        id: tag
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          echo "Release tag: $tag"
          echo "release_tag=$tag" >> "$GITHUB_OUTPUT"

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}-${{ inputs.version }}-${{ matrix.python_ver }}-${{ matrix.torch_ver }}-${{ env.cuda_fmt_ver }}
          files: |
            ${{ env.wheel_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    