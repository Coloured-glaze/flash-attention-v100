
name: test

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'branch name or version tag or commit hash: main / v0.0.1 / acdefg'
        default: 'main'
        required: true
        type: string
      python_version:
        description: 'python_version: multiple versions separated by ,'
        default: '3.10'
        required: true
        type: string
      torch_version:
        description: 'torch_version: multiple versions separated by ,'
        default: '2.1.2;2.4.0'
        required: true
        type: string
      cuda_version:
        description: 'cuda_version: multiple versions separated by ,'
        default: '11.8.0;12.1.0'
        required: true
        type: string
      os_version:
        description: 'os_version: multiple versions separated by ,'
        default: 'ubuntu-24.04'
        required: true
        type: string

jobs:
  set_ver:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          python <<EOF
          import os, json
          py_version = os.getenv("PYTHON_VERSION").split(";")
          torch_versions = os.getenv("TORCH_VERSION").split(";")
          cuda_versions = os.getenv("CUDA_VERSION").split(";")
          exclude_list = []
          for py_v in py_version:
              for torch_v in torch_versions:
                  for cuda_v in cuda_versions:
                      if (torch_v == "2.4.0" and cuda_v == "11.8.0") or \
                        (torch_v == "2.1.2" and cuda_v == "12.1.0"):
                          exclude_list.append({
                                  "python_ver": py_v,
                                  "torch_ver": torch_v,
                                  "cuda_ver": cuda_v,
                          })
          matrix = {
              "python_ver" : py_version,
              "torch_ver" : torch_versions,
              "cuda_ver" : cuda_versions,
              "include": [],
              "exclude": exclude_list,
          }
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write(f"matrix={json.dumps(matrix)}\n")
          print(matrix)
          EOF
        shell: bash
        env:
          PYTHON_VERSION: ${{ inputs.python_version }}
          TORCH_VERSION: ${{ inputs.torch_version }}  
          CUDA_VERSION: ${{ inputs.cuda_version }}
        
  job2:
    name: Job2 ${{ matrix.python_ver }}-${{ matrix.torch_ver }}-${{ matrix.cuda_ver }}
    needs: set_ver
    runs-on: ${{ inputs.os_version }}
    strategy:
      matrix: ${{ fromJSON(needs.set_ver.outputs.matrix) }}
    steps:
      - name: Print matrix
        run: |
          echo "Matrix json :${{ needs.set_ver.outputs.matrix }}"
          echo "Matrix to json: ${{ toJson(matrix) }}"
          echo "Matrix:${{ matrix }}"
        
  # job3:
  #   name: Job3 ${{ matrix.project }}-${{ matrix.config }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: 
  #       project: ["A", "B"]
  #       config: ["C", "D"]
  #       include:
  #         - project: "A"
  #           config: "C"
  #       exclude:
  #         - project: "A"
  #           config: "D"
  #   steps:
  #     - run: |
  #         echo "Matrix: ${{ toJson(matrix) }}"
  #         echo "Matrix:${{ matrix }}"